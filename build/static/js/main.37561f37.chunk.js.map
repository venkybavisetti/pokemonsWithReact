{"version":3,"sources":["utilities.js","pokemon.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","getArrayOfNums","pointA","pointB","array","end","Math","max","start","min","push","slice","PokemonDetails","props","className","name","src","imageUrl","alt","height","Pokemon","state","loaded","pokemon","undefined","fetch","this","id","then","body","json","types","setState","React","Component","pokemons","map","index","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"wFAUAA,EAAOC,QAAU,CAAEC,eAVI,SAAUC,EAAQC,GAIvC,IAHA,IAAMC,EAAQ,GACRC,EAAMC,KAAKC,IAAIL,EAAQC,GACzBK,EAAQF,KAAKG,IAAIP,EAAQC,GACjBK,GAASH,EAAKG,IACxBJ,EAAMM,KAAKF,GAEb,OAAOJ,EAAMO,W,6LCLTC,EAAiB,SAACC,GACtB,OACE,yBAAKC,UAAU,mBACb,wBAAIA,UAAU,eAAeD,EAAME,MACnC,yBAAKC,IAAKH,EAAMI,SAAUC,IAAI,UAAUC,OAAO,YAoCtCC,E,kDA9Bb,WAAYP,GAAQ,IAAD,8BACjB,cAAMA,IACDQ,MAAQ,CAAEC,QAAQ,EAAOC,aAASC,GAFtB,E,gEAKE,IAAD,OAClBC,MAAM,qCAAD,OAAsCC,KAAKb,MAAMc,KACnDC,MAAK,SAACC,GAAD,OAAUA,EAAKC,UACpBF,MAAK,YAAsB,IAAnBb,EAAkB,EAAlBA,KAAkB,EAAZgB,MACb,EAAKC,UAAS,SAACX,GAAD,MAAY,CACxBE,QAAS,CACPR,OACAE,SAAS,4DAAD,QACN,MAAQ,EAAKJ,MAAMc,IACnBhB,OAAO,GAFD,UAIVW,QAAQ,W,+BAMd,IAAKI,KAAKL,MAAMC,OACd,OAAO,yCAFF,MAIoBI,KAAKL,MAAME,QAA9BR,EAJD,EAICA,KAAME,EAJP,EAIOA,SACd,OAAO,kBAAC,EAAD,CAAgBF,KAAMA,EAAME,SAAUA,Q,GA3B3BgB,IAAMC,W,OCNtBC,EAAWlC,yBAAe,EAAG,KAAKmC,KAAI,SAACT,EAAIU,GAAL,OAC1C,kBAAC,EAAD,CAASC,IAAKD,EAAOV,GAAIA,OAIZY,EADH,kBAAM,yBAAKZ,GAAG,YAAYQ,ICGlBK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.37561f37.chunk.js","sourcesContent":["const getArrayOfNums = function (pointA, pointB) {\n  const array = [];\n  const end = Math.max(pointA, pointB);\n  let start = Math.min(pointA, pointB);\n  for (start; start <= end; start++) {\n    array.push(start);\n  }\n  return array.slice();\n};\n\nmodule.exports = { getArrayOfNums };\n","import React from 'react';\n\nconst PokemonDetails = (props) => {\n  return (\n    <div className=\"pokemonCardSize\">\n      <h3 className=\"frontHeader\">{props.name}</h3>\n      <img src={props.imageUrl} alt=\"loading\" height=\"250px\" />\n    </div>\n  );\n};\n\nclass Pokemon extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { loaded: false, pokemon: undefined };\n  }\n\n  componentDidMount() {\n    fetch(`https://pokeapi.co/api/v2/pokemon/${this.props.id}`)\n      .then((body) => body.json())\n      .then(({ name, types }) => {\n        this.setState((state) => ({\n          pokemon: {\n            name,\n            imageUrl: `http://assets22.pokemon.com/assets/cms2/img/pokedex/full/${(\n              '000' + this.props.id\n            ).slice(-3)}.png `,\n          },\n          loaded: true,\n        }));\n      });\n  }\n\n  render() {\n    if (!this.state.loaded) {\n      return <p>Loading...</p>;\n    }\n    const { name, imageUrl } = this.state.pokemon;\n    return <PokemonDetails name={name} imageUrl={imageUrl} />;\n  }\n}\n\nexport default Pokemon;\n","import React from 'react';\nimport './pokemon.css';\nimport Pokemon from './pokemon';\nimport { getArrayOfNums } from './utilities';\n\nconst pokemons = getArrayOfNums(1, 100).map((id, index) => (\n  <Pokemon key={index} id={id} />\n));\n\nconst App = () => <div id=\"pokemons\">{pokemons}</div>;\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}